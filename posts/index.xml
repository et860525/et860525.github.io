<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Mango Blog</title><link>https://et860525.github.io/posts/</link><description>Recent content in Posts on Mango Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 11 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://et860525.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Node.js + JWT Authentication 專案(一) - 初始化專案</title><link>https://et860525.github.io/posts/jwt-authentication-init/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/jwt-authentication-init/</guid><description>&lt;p>這個專案會使用 Node.js 和 TypeScript 來建構 REST API 後端，使用 &lt;a href="https://jwt.io/">JWT&lt;/a> 來實作身分認證與授權。&lt;/p>
&lt;blockquote>
&lt;p>此專案會遵循我慣用的 OOP 架構 &lt;a href="https://github.com/et860525/express-project-architecture">et860525/express-project-architecture&lt;/a>，有鑑於上一次專案的經驗，由於這些都只是小專案，我不會把所有東西都全部都包在 class 裡面&lt;/p>
&lt;/blockquote>
&lt;p>建構此專案會用到的重要套件：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Package&lt;/th>
&lt;th>Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://expressjs.com/">Express&lt;/a>&lt;/td>
&lt;td>Web 應用框架&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.typescriptlang.org/">TypeScript&lt;/a>&lt;/td>
&lt;td>開發工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://mongoosejs.com/">Mongoose&lt;/a>&lt;/td>
&lt;td>訪問資料庫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.docker.com/">Docker&lt;/a>&lt;/td>
&lt;td>應用容器化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.mongodb.com/">MongoDB&lt;/a>&lt;/td>
&lt;td>儲存使用者的資料庫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.npmjs.com/package/redis">Redis&lt;/a>&lt;/td>
&lt;td>儲存使用者緩存的 session 資料庫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/auth0/node-jsonwebtoken">JsonWebToken&lt;/a>&lt;/td>
&lt;td>產生 JWTs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/dcodeIO/bcrypt.js">Bcryptjs&lt;/a>&lt;/td>
&lt;td>密碼加密&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/colinhacks/zod">Zod&lt;/a>&lt;/td>
&lt;td>驗證使用者的輸入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://typegoose.github.io/typegoose/">Typegoose&lt;/a>&lt;/td>
&lt;td>使用 TypeScript 優化 Mongoose 模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/motdotla/dotenv">Dotenv&lt;/a>&lt;/td>
&lt;td>讀取環境變數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/expressjs/cors">Cors&lt;/a>&lt;/td>
&lt;td>允許資料能在前端與後端之間分享&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://lodash.com/">lodash&lt;/a>&lt;/td>
&lt;td>對 JavaScript 的功能擴充&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/wclr/ts-node-dev">ts-node-dev&lt;/a>&lt;/td>
&lt;td>當檔案變更時自動重啟&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>OAuth Grant</title><link>https://et860525.github.io/posts/oauth-grant/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/oauth-grant/</guid><description>OAuth 2.0 最大的優勢是可擴展性與模塊化，但這樣的靈活性也導致於在不同的實現之間，會存在著相容性問題。當開發人員想在不同的系統上實現 OAuth 時，它提供很多的自定義選項容易讓人很困惑。
OAuth 2.0 一共定義了 7 種授權類型，可以根據不同的情況與環境使用不同的模式：
Legacy: 密碼模式 ( Password Grant ) Legacy: 隱含模式 ( Implicit Flow ) 授權碼 ( Authorization Code ) 刷新令牌 ( Refresh Token ) 客戶憑證 ( Client Credentials ) PKCE ( Proof Key for Code Exchange ) 設備碼 ( Device Code ) 起初，OAuth 設計是基於 HTTP 的，但實現方法的細節可以有很多種。
在上一篇有提到，OAuth 裡定義的四種角色。其中的客戶端還可以分為兩種：
前端客戶端：通常前端客戶端指的是瀏覽器 後端客戶端：後端客戶端指的是，實際需要取得存取權杖 ( Access Token ) 的服務 通常的流程為：
資源擁有者 透過瀏覽器登入 ( 此步驟意同瀏覽器向資源擁有者授權請求 ) 授權伺服器 驗證身分並確認授權 授權給客戶端 ( 獲得存取權杖 ) 客戶端取得受保護的資源 客戶端提供資源擁有者服務 以上流程為 1.</description></item><item><title>理解 OAuth</title><link>https://et860525.github.io/posts/oauth-first-look/</link><pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/oauth-first-look/</guid><description>OAuth 是一個開放標準的授權協議，它允許使用者讓第三方應用存取該使用者在某網站儲存的私密資源。
試想有一棟房子，裡面有很多個房間，裡面有一位房東 ( 使用者 ) 擁有一把萬能鑰匙，可以開啟所有的房間門。除此之外，這把萬能鑰匙還有一個作用，就是可以產出特定門的鑰匙，而產生出來的鑰匙可以交給其他人，這樣其他人就可以進出特定的房間，這個動作就是「授權」。
OAuth 2.0 是 OAuth 的進化版，它是授權框架 ( authorization framework )，允許應用向使用者請求授權，然後取得 Token，並且用它來訪問資源。
The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf. － RFC 6749</description></item><item><title>初試 WebSocket</title><link>https://et860525.github.io/posts/websocket-first-look/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/websocket-first-look/</guid><description>&lt;p>&lt;a href="https://zh.wikipedia.org/zh-tw/WebSocket">WebSocket&lt;/a> 是由 &lt;a href="https://zh.wikipedia.org/zh-tw/HTML5">HTML 5&lt;/a> 所提供用於讓瀏覽器與伺服器進行互動通訊的技術。&lt;/p>
&lt;p>WebSocket 只需要連線一次，就能保持與伺服器的&lt;strong>雙向溝通&lt;/strong>，無須重新發送 Request，這也讓回應更即時與快速。&lt;/p></description></item><item><title>Restaurant Management 專案(三) - 新增 Response Object 與完成 MenuItem</title><link>https://et860525.github.io/posts/restaurant-management-modify-base-code/</link><pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/restaurant-management-modify-base-code/</guid><description>&lt;p>當我開始完善各個功能時，就發現回傳 view 所需要的函式不只有 &lt;code>render&lt;/code>，在某些時候還是要使用 &lt;code>redirect&lt;/code>，而當這樣會有兩種格式要回傳時，我就會建立 &lt;strong>Response Object&lt;/strong> 來制定回傳的格式，並且在 &lt;code>route.base&lt;/code> 中就要多一個專門處理 &lt;code>redirect&lt;/code> 的函式。&lt;/p>
&lt;p>當這些都完成後，就可以開始實作網頁的功能了，在這篇文章裡我會實作 &lt;code>MenuItem&lt;/code> 的 CRUD。&lt;/p>
&lt;p>Github：&lt;a href="https://github.com/et860525/restaurant-management">et860525/restaurant-management&lt;/a>&lt;/p></description></item><item><title>Restaurant Management 專案(二) - 建立 Model 與 Repository</title><link>https://et860525.github.io/posts/restaurant-management-model-repository/</link><pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/restaurant-management-model-repository/</guid><description>&lt;p>接下來就要設計 &lt;code>Model&lt;/code> 與建立 &lt;code>Repository&lt;/code> 來跟資料庫進行交互。&lt;/p>
&lt;p>首先，設計 &lt;code>Model&lt;/code> 的範本是來自 &lt;a href="https://dribbble.com/shots/20762377-Cheseto-Restaurant-POS-App-Full-Preview">Cheseto Restaurant POS App - Full Preview&lt;/a>，此範本包含四個 table：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Table&lt;/strong>：餐廳裡的桌子&lt;/li>
&lt;li>&lt;strong>MenuItem&lt;/strong>：菜單品項&lt;/li>
&lt;li>&lt;strong>Order&lt;/strong>：訂單&lt;/li>
&lt;li>&lt;strong>Customer&lt;/strong>：客人的資訊&lt;/li>
&lt;/ol>
&lt;p>完成 &lt;code>Model&lt;/code> 後，先寫出 &lt;code>repository.base&lt;/code> 再套用到各自的 table 上，以上。&lt;/p>
&lt;p>Github：&lt;a href="https://github.com/et860525/restaurant-management">et860525/restaurant-management&lt;/a>&lt;/p></description></item><item><title>Restaurant Management 專案(一) - 架構與初始化</title><link>https://et860525.github.io/posts/restaurant-management-init/</link><pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/restaurant-management-init/</guid><description>&lt;p>這個專案會使用 OOP 的方式來建構，前端部分會以簡單的方式呈現。&lt;/p>
&lt;p>整個架構會用到的重要套件：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Package&lt;/th>
&lt;th>Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://expressjs.com/">Express&lt;/a>&lt;/td>
&lt;td>Web 應用框架&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.typescriptlang.org/">TypeScript&lt;/a>&lt;/td>
&lt;td>開發工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.prisma.io/">Prisma&lt;/a>&lt;/td>
&lt;td>訪問資料庫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.docker.com/">Docker&lt;/a>&lt;/td>
&lt;td>應用容器化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.postgresql.org/">PostgreSQL&lt;/a>&lt;/td>
&lt;td>資料庫&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>此專案的目的是要讓 Express 使用 Prisma 來訪問資料庫，並且使用 Docker 來建立 PostgreSQL 資料庫。&lt;/p>
&lt;p>Github：&lt;a href="https://github.com/et860525/restaurant-management">et860525/restaurant-management&lt;/a>&lt;/p></description></item><item><title>Docker: 設定 MongoDB</title><link>https://et860525.github.io/posts/docker-mongodb/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/docker-mongodb/</guid><description>&lt;p>使用 Docker 來建置 MongoDB，可以先到 &lt;a href="https://hub.docker.com/_/mongo">docker mongo&lt;/a> 來選擇版本。&lt;/p>
&lt;p>MongoDB 會有幾種架構：&lt;/p>
&lt;ol>
&lt;li>Standalone
&lt;ul>
&lt;li>建立難度 &lt;strong>低&lt;/strong>&lt;/li>
&lt;li>單一 MongoDB 資料庫&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.mongodb.com/docs/manual/replication/">Replica Set&lt;/a>
&lt;ul>
&lt;li>建立難度 &lt;strong>中&lt;/strong>&lt;/li>
&lt;li>資料會有多個副本提供容錯空間&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.mongodb.com/docs/manual/sharding/">Sharded Cluster&lt;/a>
&lt;ul>
&lt;li>建立難度 &lt;strong>高&lt;/strong>&lt;/li>
&lt;li>資料放置在不同的 shard，每個 shard 或 config servers 都是 &lt;code>Replica Set&lt;/code>
&lt;img loading="lazy" src="https://et860525.github.io/images/Docker-mongodb/Docker-sharded-cluster-production-architecture.png" alt="Docker-sharded-cluster-production-architecture.png" />
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Pnpm ( Performant Node Package Manager )</title><link>https://et860525.github.io/posts/pnpm/</link><pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/pnpm/</guid><description>&lt;p>&lt;a href="https://pnpm.io/">Pnpm&lt;/a> ( Performant Node Package Manager ) 是一個套件管理器。根據官網表示，可以節省磁碟空間並提升安裝速度。&lt;/p>
&lt;blockquote>
&lt;p>Fast, disk space efficient package manager&lt;/p>
&lt;/blockquote></description></item><item><title>Rust: 生命週期( Lifetimes )</title><link>https://et860525.github.io/posts/rust-lifetimes/</link><pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/rust-lifetimes/</guid><description>&lt;p>&lt;strong>生命週期 ( lifetimes )&lt;/strong> 會確保我們在需要引用的時候，它們都是有效的。&lt;/p>
&lt;p>在 Rust 中，每個引用都是有生命週期的，簡單來說就是它的有效範圍。在大多情況下，生命週期都是隱藏且可以推導出來的，如同型別一樣也都是可以推導出來的。當型別有很多種可能的情況下，就要&lt;strong>詮釋型別&lt;/strong>，同樣在生命週期下，引用以不同方式關聯的話，就要&lt;strong>詮釋生命週期&lt;/strong>。&lt;/p></description></item><item><title>TypeScript: 初始化 Express 專案</title><link>https://et860525.github.io/posts/typescript-express-initialization/</link><pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/typescript-express-initialization/</guid><description>&lt;p>這篇文章會紀錄如何在 &lt;a href="https://expressjs.com/">Express&lt;/a> 專案裡設定 &lt;a href="https://www.typescriptlang.org/">TypeScript&lt;/a>。&lt;/p>
&lt;p>先決條件：&lt;/p>
&lt;ul>
&lt;li>安裝 &lt;a href="https://nodejs.org/en/">Node.js&lt;/a> ( LTS ) 在你的開發環境上&lt;/li>
&lt;li>基本的 &lt;code>Node.js&lt;/code> 、 &lt;code>Express&lt;/code> 與 &lt;code>TypeScript&lt;/code> 知識&lt;/li>
&lt;/ul></description></item><item><title>Rust: 特徵( Trait )</title><link>https://et860525.github.io/posts/rust-trait/</link><pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/rust-trait/</guid><description>&lt;p>特徵( trait )，是定義特定型別與其他型別共享的功能。可以使用&lt;strong>特徵界限 ( trait bounds )&lt;/strong> 來指定泛型型別為擁有特定行為的任意型別。&lt;/p>
&lt;blockquote>
&lt;p>特徵類似於其他語言常稱作&lt;strong>介面 ( interfaces )&lt;/strong> 的功能，但還是有些差異。&lt;/p>
&lt;/blockquote></description></item><item><title>Rust: 泛型( Generics )</title><link>https://et860525.github.io/posts/rust-generics/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/rust-generics/</guid><description>&lt;p>泛型 ( generics )，實際型別或屬性的抽象表示。舉例來說，&lt;code>String&lt;/code> 和 &lt;code>i32&lt;/code> 這兩個不同型別的資料都可以被存到 &lt;a href="https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec 結構體&lt;/a>建立的實例中，不需要針對型別來做分別，只要使用 &lt;code>Vec&amp;lt;String&amp;gt;&lt;/code> 或 &lt;code>Vec&amp;lt;i32&amp;gt;&lt;/code>，這是因為 &lt;code>Vec&lt;/code> 結構體使用了泛型。&lt;/p>
&lt;p>泛型就是 &lt;strong>參數多型 ( parametric polymorphism )&lt;/strong>，在定義型別或函數的時候不去明確指定具體的型別，而是以參數的形式來傳入型別，這可以讓程式設計更為彈性。&lt;/p>
&lt;p>以下先來看泛型在各個地方中如何定義。&lt;/p></description></item><item><title>Rust: 所有權( Ownership )</title><link>https://et860525.github.io/posts/rust-ownership/</link><pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/rust-ownership/</guid><description>&lt;p>在一開始撰寫文章時，本來想以寫比較久的 TypeScript 來做部落格的開頭文章，但在過年前接觸到 Rust 這個程式語言，就順勢把最近學到的東西放上來。等到把在 TypeScript 遇到的問題整理一下再寫成一個系列放上來。&lt;/p>
&lt;p>&lt;strong>所有權 ( ownership )&lt;/strong> 是 Rust 用來 &lt;strong>管理程式記憶體的一系列規則&lt;/strong>，讓 Rust 不需要&lt;a href="https://zh.wikipedia.org/zh-tw/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收 ( Garbage collection )&lt;/a> 就可以保障記憶體的安全。&lt;/p></description></item><item><title>將 Hugo 產生的靜態網站部屬在 GitHub Pages</title><link>https://et860525.github.io/posts/hugo-with-github-pages/</link><pubDate>Wed, 11 Jan 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/hugo-with-github-pages/</guid><description>&lt;p>在初期建立部落格時，本來是想租一台虛擬主機，再把寫好的網頁丟上去，不過最後還是選擇使用 &lt;a href="https://pages.github.com/">GitHub Pages&lt;/a>。&lt;/p>
&lt;p>Jekyll 是 Github 建議的靜態網站產生器，不過在查詢資料時發現由 Go 所建構的 &lt;a href="https://gohugo.io/">Hugo&lt;/a>，點進去網頁上面就寫著自己是「世界上最快的網站架設框架」，那不試試看怎麼行。&lt;/p></description></item></channel></rss>