<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Backend on Mango Blog</title><link>https://et860525.github.io/tags/backend/</link><description>Recent content in Backend on Mango Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 25 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://et860525.github.io/tags/backend/index.xml" rel="self" type="application/rss+xml"/><item><title>OAuth Grant</title><link>https://et860525.github.io/posts/oauth-grant/</link><pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/oauth-grant/</guid><description>OAuth 2.0 最大的優勢是可擴展性與模塊化，但這樣的靈活性也導致於在不同的實現之間，會存在著相容性問題。當開發人員想在不同的系統上實現 OAuth 時，它提供很多的自定義選項容易讓人很困惑。
OAuth 2.0 一共定義了 7 種授權類型，可以根據不同的情況與環境使用不同的模式：
Legacy: 密碼模式 ( Password Grant ) Legacy: 隱含模式 ( Implicit Flow ) 授權碼 ( Authorization Code ) 刷新令牌 ( Refresh Token ) 客戶憑證 ( Client Credentials ) PKCE ( Proof Key for Code Exchange ) 設備碼 ( Device Code ) 起初，OAuth 設計是基於 HTTP 的，但實現方法的細節可以有很多種。
在上一篇有提到，OAuth 裡定義的四種角色。其中的客戶端還可以分為兩種：
前端客戶端：通常前端客戶端指的是瀏覽器 後端客戶端：後端客戶端指的是，實際需要取得存取權杖 ( Access Token ) 的服務 通常的流程為：
資源擁有者 透過瀏覽器登入 ( 此步驟意同瀏覽器向資源擁有者授權請求 ) 授權伺服器 驗證身分並確認授權 授權給客戶端 ( 獲得存取權杖 ) 客戶端取得受保護的資源 客戶端提供資源擁有者服務 以上流程為 1.</description></item><item><title>理解 OAuth</title><link>https://et860525.github.io/posts/oauth-first-look/</link><pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/oauth-first-look/</guid><description>OAuth 是一個開放標準的授權協議，它允許使用者讓第三方應用存取該使用者在某網站儲存的私密資源。
試想有一棟房子，裡面有很多個房間，裡面有一位房東 ( 使用者 ) 擁有一把萬能鑰匙，可以開啟所有的房間門。除此之外，這把萬能鑰匙還有一個作用，就是可以產出特定門的鑰匙，而產生出來的鑰匙可以交給其他人，這樣其他人就可以進出特定的房間，這個動作就是「授權」。
OAuth 2.0 是 OAuth 的進化版，它是授權框架 ( authorization framework )，允許應用向使用者請求授權，然後取得 Token，並且用它來訪問資源。
The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf. － RFC 6749</description></item><item><title>初試 WebSocket</title><link>https://et860525.github.io/posts/websocket-first-look/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/websocket-first-look/</guid><description>&lt;p>&lt;a href="https://zh.wikipedia.org/zh-tw/WebSocket">WebSocket&lt;/a> 是由 &lt;a href="https://zh.wikipedia.org/zh-tw/HTML5">HTML 5&lt;/a> 所提供用於讓瀏覽器與伺服器進行互動通訊的技術。&lt;/p>
&lt;p>WebSocket 只需要連線一次，就能保持與伺服器的&lt;strong>雙向溝通&lt;/strong>，無須重新發送 Request，這也讓回應更即時與快速。&lt;/p></description></item><item><title>Docker: 設定 MongoDB</title><link>https://et860525.github.io/posts/docker-mongodb/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/docker-mongodb/</guid><description>&lt;p>使用 Docker 來建置 MongoDB，可以先到 &lt;a href="https://hub.docker.com/_/mongo">docker mongo&lt;/a> 來選擇版本。&lt;/p>
&lt;p>MongoDB 會有幾種架構：&lt;/p>
&lt;ol>
&lt;li>Standalone
&lt;ul>
&lt;li>建立難度 &lt;strong>低&lt;/strong>&lt;/li>
&lt;li>單一 MongoDB 資料庫&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.mongodb.com/docs/manual/replication/">Replica Set&lt;/a>
&lt;ul>
&lt;li>建立難度 &lt;strong>中&lt;/strong>&lt;/li>
&lt;li>資料會有多個副本提供容錯空間&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.mongodb.com/docs/manual/sharding/">Sharded Cluster&lt;/a>
&lt;ul>
&lt;li>建立難度 &lt;strong>高&lt;/strong>&lt;/li>
&lt;li>資料放置在不同的 shard，每個 shard 或 config servers 都是 &lt;code>Replica Set&lt;/code>
&lt;img loading="lazy" src="https://et860525.github.io/images/Docker-mongodb/Docker-sharded-cluster-production-architecture.png" alt="Docker-sharded-cluster-production-architecture.png" />
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item></channel></rss>