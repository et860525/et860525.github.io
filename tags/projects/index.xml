<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Projects on Mango Blog</title><link>https://et860525.github.io/tags/projects/</link><description>Recent content in Projects on Mango Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 16 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://et860525.github.io/tags/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Restaurant Management 專案(三) - 新增 Response Object 與完成 MenuItem</title><link>https://et860525.github.io/posts/restaurant-management-modify-base-code/</link><pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/restaurant-management-modify-base-code/</guid><description>&lt;p>當我開始完善各個功能時，就發現回傳 view 所需要的函式不只有 &lt;code>render&lt;/code>，在某些時候還是要使用 &lt;code>redirect&lt;/code>，而當這樣會有兩種格式要回傳時，我就會建立 &lt;strong>Response Object&lt;/strong> 來制定回傳的格式，並且在 &lt;code>route.base&lt;/code> 中就要多一個專門處理 &lt;code>redirect&lt;/code> 的函式。&lt;/p>
&lt;p>當這些都完成後，就可以開始實作網頁的功能了，在這篇文章裡我會實作 &lt;code>MenuItem&lt;/code> 的 CRUD。&lt;/p>
&lt;p>Github：&lt;a href="https://github.com/et860525/restaurant-management">et860525/restaurant-management&lt;/a>&lt;/p></description></item><item><title>Restaurant Management 專案(二) - 建立 Model 與 Repository</title><link>https://et860525.github.io/posts/restaurant-management-model-repository/</link><pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/restaurant-management-model-repository/</guid><description>&lt;p>接下來就要設計 &lt;code>Model&lt;/code> 與建立 &lt;code>Repository&lt;/code> 來跟資料庫進行交互。&lt;/p>
&lt;p>首先，設計 &lt;code>Model&lt;/code> 的範本是來自 &lt;a href="https://dribbble.com/shots/20762377-Cheseto-Restaurant-POS-App-Full-Preview">Cheseto Restaurant POS App - Full Preview&lt;/a>，此範本包含四個 table：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Table&lt;/strong>：餐廳裡的桌子&lt;/li>
&lt;li>&lt;strong>MenuItem&lt;/strong>：菜單品項&lt;/li>
&lt;li>&lt;strong>Order&lt;/strong>：訂單&lt;/li>
&lt;li>&lt;strong>Customer&lt;/strong>：客人的資訊&lt;/li>
&lt;/ol>
&lt;p>完成 &lt;code>Model&lt;/code> 後，先寫出 &lt;code>repository.base&lt;/code> 再套用到各自的 table 上，以上。&lt;/p>
&lt;p>Github：&lt;a href="https://github.com/et860525/restaurant-management">et860525/restaurant-management&lt;/a>&lt;/p></description></item><item><title>Restaurant Management 專案(一) - 架構與初始化</title><link>https://et860525.github.io/posts/restaurant-management-init/</link><pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/restaurant-management-init/</guid><description>&lt;p>這個專案會使用 OOP 的方式來建構，前端部分會以簡單的方式呈現。&lt;/p>
&lt;p>整個架構會用到的重要套件：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Package&lt;/th>
&lt;th>Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://expressjs.com/">Express&lt;/a>&lt;/td>
&lt;td>Web 應用框架&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.typescriptlang.org/">TypeScript&lt;/a>&lt;/td>
&lt;td>開發工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.prisma.io/">Prisma&lt;/a>&lt;/td>
&lt;td>訪問資料庫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.docker.com/">Docker&lt;/a>&lt;/td>
&lt;td>應用容器化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.postgresql.org/">PostgreSQL&lt;/a>&lt;/td>
&lt;td>資料庫&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>此專案的目的是要讓 Express 使用 Prisma 來訪問資料庫，並且使用 Docker 來建立 PostgreSQL 資料庫。&lt;/p>
&lt;p>Github：&lt;a href="https://github.com/et860525/restaurant-management">et860525/restaurant-management&lt;/a>&lt;/p></description></item></channel></rss>