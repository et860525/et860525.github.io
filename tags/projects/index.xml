<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Projects on Mango Blog</title><link>https://et860525.github.io/tags/projects/</link><description>Recent content in Projects on Mango Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 30 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://et860525.github.io/tags/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot 專案(六) - 資料庫關聯: One-to-Many &amp; Many-to-One</title><link>https://et860525.github.io/posts/spring-boot-one-to-many/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/spring-boot-one-to-many/</guid><description>&lt;p>實現資料一對多與多對一的關聯。讓一個 Todo 只能有一個 Category，一個 Category 會有多個 Todo。&lt;/p></description></item><item><title>Spring Boot 專案(五) - 單元測試 Mockito</title><link>https://et860525.github.io/posts/spring-boot-test-mockito/</link><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/spring-boot-test-mockito/</guid><description>&lt;p>&lt;strong>單元測試(Unit Test)&lt;/strong>，是針對程式撰寫時，對最小單位進行正確性驗證的測試。一個&lt;strong>單元(Unit)&lt;/strong> 可以是一支程式、方法或過程，在物件導向的程式裡，最小的單元就是&lt;strong>方法&lt;/strong>。&lt;/p></description></item><item><title>Spring Boot 專案(四) - 連接到真實資料庫與 Swagger</title><link>https://et860525.github.io/posts/spring-boot-db-and-swagger/</link><pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/spring-boot-db-and-swagger/</guid><description>&lt;p>使用 H2 資料庫的好處就是，測試資料的時候很方便，不需要實際有一個資料庫。但這也代表你所存放的資料，在專案關閉後就會消失。&lt;/p></description></item><item><title>Spring Boot 專案(三) - 分層式架構</title><link>https://et860525.github.io/posts/spring-boot-layered-architecture/</link><pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/spring-boot-layered-architecture/</guid><description>&lt;p>這一篇會整理分層式架構的資訊，並實際運用於 RESTful-API 專案裡。為了不要讓整篇文章太長，我只會放幾個 Method 來展示，更完整的程式碼可以參考 &lt;a href="https://github.com/et860525/spring-restful">et860525/spring-restful&lt;/a>。&lt;/p></description></item><item><title>Spring Boot 專案(二) - 資料庫與互動</title><link>https://et860525.github.io/posts/spring-boot-database-data/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/spring-boot-database-data/</guid><description>&lt;p>基本的設定完成後，現在就要來設計資料的存放問題。這裡會先使用 H2 Database，後面我會在 Docker 上部屬一個 MySQL 來存放資料。&lt;/p></description></item><item><title>Spring Boot 專案(一) - 介紹與開發環境</title><link>https://et860525.github.io/posts/spring-boot-intro/</link><pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/spring-boot-intro/</guid><description>&lt;p>畢業後開始找工作，在高雄開有關於 Express 的職缺很少，就因為這樣我決定多學一個後端框架。選擇 Spring 是因為大二的時候學過 Java，看了半天的書記憶就回復得差不多了。學到現在其實不難，也多虧有學習其他框架，在概念上很快就可以理解了。&lt;/p></description></item><item><title>Node.js + JWT Authentication 專案(三) - 專案 Controller 與 Middleware</title><link>https://et860525.github.io/posts/jwt-authentication-function-and-middleware/</link><pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/jwt-authentication-function-and-middleware/</guid><description>&lt;p>最後一章就要來完成整個專案，把剩下的 Controller、Middleware 與 Routes 完成即可。&lt;/p></description></item><item><title>Node.js + JWT Authentication 專案(二) - 資料庫 Models 與 JWT</title><link>https://et860525.github.io/posts/jwt-authentication-models-jwt/</link><pubDate>Sun, 16 Apr 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/jwt-authentication-models-jwt/</guid><description>&lt;p>此篇章會使用 &lt;a href="https://typegoose.github.io/typegoose/">Typegoose&lt;/a> 來建立資料庫的 models，並且設定獲得與驗證 JWT 的方法。&lt;/p></description></item><item><title>Node.js + JWT Authentication 專案(一) - 初始化專案</title><link>https://et860525.github.io/posts/jwt-authentication-init/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/jwt-authentication-init/</guid><description>&lt;p>這個專案會使用 Node.js 和 TypeScript 來建構 REST API 後端，使用 &lt;a href="https://jwt.io/">JWT&lt;/a> 來實作身分認證與授權。&lt;/p>
&lt;blockquote>
&lt;p>此專案會遵循我慣用的 OOP 架構 &lt;a href="https://github.com/et860525/express-project-architecture">et860525/express-project-architecture&lt;/a>，有鑑於上一次專案的經驗，由於這些都只是小專案，我不會把所有東西都全部都包在 class 裡面&lt;/p>
&lt;/blockquote>
&lt;p>建構此專案會用到的重要套件：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Package&lt;/th>
&lt;th>Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://expressjs.com/">Express&lt;/a>&lt;/td>
&lt;td>Web 應用框架&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.typescriptlang.org/">TypeScript&lt;/a>&lt;/td>
&lt;td>開發工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://mongoosejs.com/">Mongoose&lt;/a>&lt;/td>
&lt;td>訪問資料庫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.docker.com/">Docker&lt;/a>&lt;/td>
&lt;td>應用容器化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.mongodb.com/">MongoDB&lt;/a>&lt;/td>
&lt;td>儲存使用者的資料庫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.npmjs.com/package/redis">Redis&lt;/a>&lt;/td>
&lt;td>儲存使用者緩存的 session 資料庫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/auth0/node-jsonwebtoken">JsonWebToken&lt;/a>&lt;/td>
&lt;td>產生 JWTs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/dcodeIO/bcrypt.js">Bcryptjs&lt;/a>&lt;/td>
&lt;td>密碼加密&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/colinhacks/zod">Zod&lt;/a>&lt;/td>
&lt;td>驗證使用者的輸入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://typegoose.github.io/typegoose/">Typegoose&lt;/a>&lt;/td>
&lt;td>使用 TypeScript 優化 Mongoose 模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/motdotla/dotenv">Dotenv&lt;/a>&lt;/td>
&lt;td>讀取環境變數&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/expressjs/cors">Cors&lt;/a>&lt;/td>
&lt;td>允許資料能在前端與後端之間分享&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://lodash.com/">lodash&lt;/a>&lt;/td>
&lt;td>對 JavaScript 的功能擴充&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://github.com/wclr/ts-node-dev">ts-node-dev&lt;/a>&lt;/td>
&lt;td>當檔案變更時自動重啟&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Restaurant Management 專案(三) - 新增 Response Object 與完成 MenuItem</title><link>https://et860525.github.io/posts/restaurant-management-modify-base-code/</link><pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/restaurant-management-modify-base-code/</guid><description>&lt;p>當我開始完善各個功能時，就發現回傳 view 所需要的函式不只有 &lt;code>render&lt;/code>，在某些時候還是要使用 &lt;code>redirect&lt;/code>，而當這樣會有兩種格式要回傳時，我就會建立 &lt;strong>Response Object&lt;/strong> 來制定回傳的格式，並且在 &lt;code>route.base&lt;/code> 中就要多一個專門處理 &lt;code>redirect&lt;/code> 的函式。&lt;/p>
&lt;p>當這些都完成後，就可以開始實作網頁的功能了，在這篇文章裡我會實作 &lt;code>MenuItem&lt;/code> 的 CRUD。&lt;/p>
&lt;p>Github：&lt;a href="https://github.com/et860525/restaurant-management">et860525/restaurant-management&lt;/a>&lt;/p></description></item><item><title>Restaurant Management 專案(二) - 建立 Model 與 Repository</title><link>https://et860525.github.io/posts/restaurant-management-model-repository/</link><pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/restaurant-management-model-repository/</guid><description>&lt;p>接下來就要設計 &lt;code>Model&lt;/code> 與建立 &lt;code>Repository&lt;/code> 來跟資料庫進行交互。&lt;/p>
&lt;p>首先，設計 &lt;code>Model&lt;/code> 的範本是來自 &lt;a href="https://dribbble.com/shots/20762377-Cheseto-Restaurant-POS-App-Full-Preview">Cheseto Restaurant POS App - Full Preview&lt;/a>，此範本包含四個 table：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Table&lt;/strong>：餐廳裡的桌子&lt;/li>
&lt;li>&lt;strong>MenuItem&lt;/strong>：菜單品項&lt;/li>
&lt;li>&lt;strong>Order&lt;/strong>：訂單&lt;/li>
&lt;li>&lt;strong>Customer&lt;/strong>：客人的資訊&lt;/li>
&lt;/ol>
&lt;p>完成 &lt;code>Model&lt;/code> 後，先寫出 &lt;code>repository.base&lt;/code> 再套用到各自的 table 上，以上。&lt;/p>
&lt;p>Github：&lt;a href="https://github.com/et860525/restaurant-management">et860525/restaurant-management&lt;/a>&lt;/p></description></item><item><title>Restaurant Management 專案(一) - 架構與初始化</title><link>https://et860525.github.io/posts/restaurant-management-init/</link><pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate><guid>https://et860525.github.io/posts/restaurant-management-init/</guid><description>&lt;p>這個專案會使用 OOP 的方式來建構，前端部分會以簡單的方式呈現。&lt;/p>
&lt;p>整個架構會用到的重要套件：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Package&lt;/th>
&lt;th>Usage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="https://expressjs.com/">Express&lt;/a>&lt;/td>
&lt;td>Web 應用框架&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.typescriptlang.org/">TypeScript&lt;/a>&lt;/td>
&lt;td>開發工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.prisma.io/">Prisma&lt;/a>&lt;/td>
&lt;td>訪問資料庫&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.docker.com/">Docker&lt;/a>&lt;/td>
&lt;td>應用容器化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://www.postgresql.org/">PostgreSQL&lt;/a>&lt;/td>
&lt;td>資料庫&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>此專案的目的是要讓 Express 使用 Prisma 來訪問資料庫，並且使用 Docker 來建立 PostgreSQL 資料庫。&lt;/p>
&lt;p>Github：&lt;a href="https://github.com/et860525/restaurant-management">et860525/restaurant-management&lt;/a>&lt;/p></description></item></channel></rss>